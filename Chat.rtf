{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Bold;\f1\froman\fcharset0 Times-Roman;\f2\fnil\fcharset0 HelveticaNeue;
\f3\fmodern\fcharset0 Courier;\f4\fmodern\fcharset0 Courier-Oblique;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red109\green109\blue109;\red0\green0\blue0;
\red179\green179\blue179;\red66\green147\blue62;\red147\green0\blue147;\red50\green94\blue238;\red143\green144\blue150;
\red14\green112\blue173;\red133\green85\blue4;\red178\green113\blue6;\red219\green63\blue57;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c50196\c50196\c50196;\cssrgb\c0\c0\c0\c84706;
\cssrgb\c75294\c75294\c75294;\cssrgb\c31373\c63137\c30980;\cssrgb\c65098\c14902\c64314;\cssrgb\c25098\c47059\c94902;\cssrgb\c62745\c63137\c65490;
\cssrgb\c392\c51765\c73333;\cssrgb\c59608\c40784\c392;\cssrgb\c75686\c51765\c392;\cssrgb\c89412\c33725\c28627;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid2\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid102\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid202\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid502\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid602\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Analysis of Your main.py Code\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs24 \cf0 Your main.py is a FastAPI application that already aligns well with our Official Plan. Let\'92s break down its key components to understand how it fits into Step 1:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Imports and Models
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 You\'92re using FastAPI, SentenceTransformer, YOLO, Mediapipe, Transformers (for depth estimation), EasyOCR, OpenAI, and gTTS\'97covering all the AI models needed for object identification, TTS, and scene awareness.\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The depth estimator is set to device='cuda', but we know from earlier that your MacBook Air (Apple Silicon) needs device='mps' (or 'cpu' as a fallback). We\'92ll fix this.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Functions
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 perform_ocr_and_speak(image_path, language='en'): Uses EasyOCR to extract text from an image and returns the text. This matches image-to-tts.py functionality.\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 analyze_image_with_gpt(image, api_key): Sends the image to OpenAI\'92s GPT-4o for a brief description, suitable for scene awareness. This matches image-description.py.\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 hand_to_object_finder(image, i): Processes an image for object detection (YOLO), hand tracking (Mediapipe), and depth estimation, returning directions to an object. This matches backendcodeforobjectgrabber.py, but it has a bug: image = cv2.imread("path_to_image.jpg") hardcodes a path, ignoring the input image.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Endpoints
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 /speech: Takes a JSON payload with a query (e.g., \{"query": "tell me what I\'92m looking at"\}), uses NLP to classify the intent, and sets a global response_toapp variable with a preliminary response (e.g., "Ok, I will describe what is in front of you").\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 /process-image: Takes an uploaded image, checks response_toapp, and calls the appropriate function (perform_ocr_and_speak, analyze_image_with_gpt, or hand_to_object_finder) to process the image and return a text response.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Issues to Address
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1
\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Device Setting
\f1\b0 : The depth estimator uses device='cuda', which won\'92t work on your MacBook Air. We\'92ll change it to device='mps'.\
\ls1\ilvl1
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Bug in hand_to_object_finder
\f1\b0 : The function ignores the input image and tries to read from a hardcoded path ("path_to_image.jpg"). We\'92ll fix this to use the input image.\
\ls1\ilvl1
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Global Variable
\f1\b0 : Using response_toapp as a global variable to pass state between /speech and /process-image can cause issues with concurrent requests (e.g., multiple users). We\'92ll modify the workflow to combine these into a single /process endpoint, as per our Official Plan.\
\ls1\ilvl1
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Image Handling
\f1\b0 : The /process-image endpoint expects a PIL image, but hand_to_object_finder expects a NumPy array (from OpenCV). We\'92ll need to convert between formats.\
\pard\pardeftab720\partightenfactor0
\cf3 \strokec3 \
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 \strokec2 Step 1: Set Up the FastAPI Backend\
\pard\pardeftab720\sa240\partightenfactor0

\fs24 \cf0 Objective
\f1\b0 : Create a functional FastAPI server with a /process endpoint that accepts both a text prompt and an image, processes them, and returns a text response. Since you already have main.py, we\'92ll modify it to align with our Official Plan.\
\pard\pardeftab720\sa319\partightenfactor0

\f0\b \cf0 1.1 Fix the Device Setting for Depth Estimator\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Change device='cuda' to device='mps'
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls2\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In main.py, find this line (around line 20): python\uc0\u8232 
\f2\fs22 \cf4 \cb5 \strokec4 CollapseWrapCopy
\f1\fs24 \cf0 \cb1 \strokec2 \uc0\u8232 \u8232 
\f3\fs23\fsmilli11700 depth_estimator = pipeline(task=\cf6 \strokec6 "depth-estimation"\cf0 \strokec2 , model=\cf6 \strokec6 "depth-anything/Depth-Anything-V2-Small-hf"\cf0 \strokec2 , device=\cf6 \strokec6 'cuda'\cf0 \strokec2 )
\f1\fs21\fsmilli10800 \uc0\u8232 
\fs24 \uc0\u8232 \
\ls2\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Change it to: python\uc0\u8232 
\f2\fs22 \cf4 \cb5 \strokec4 CollapseWrapCopy
\f1\fs24 \cf0 \cb1 \strokec2 \uc0\u8232 \u8232 
\f3\fs23\fsmilli11700 depth_estimator = pipeline(task=\cf6 \strokec6 "depth-estimation"\cf0 \strokec2 , model=\cf6 \strokec6 "depth-anything/Depth-Anything-V2-Small-hf"\cf0 \strokec2 , device=\cf6 \strokec6 'mps'\cf0 \strokec2 )
\f1\fs21\fsmilli10800 \uc0\u8232 
\fs24 \uc0\u8232 \
\ls2\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Save the file (Command + S).\
\pard\pardeftab720\sa319\partightenfactor0

\f0\b \cf0 1.2 Fix the Bug in hand_to_object_finder\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Remove the Hardcoded Path
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls3\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In hand_to_object_finder, remove this line: python\uc0\u8232 
\f2\fs22 \cf4 \cb5 \strokec4 CollapseWrapCopy
\f1\fs24 \cf0 \cb1 \strokec2 \uc0\u8232 \u8232 
\f3\fs23\fsmilli11700 image = cv2.imread(\cf6 \strokec6 "path_to_image.jpg"\cf0 \strokec2 )
\f1\fs21\fsmilli10800 \uc0\u8232 
\fs24 \uc0\u8232 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The image parameter is already passed in (as a NumPy array from OpenCV). We\'92ll ensure the caller passes it correctly.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0
\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Update the Function
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls3\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Since /process-image passes a PIL image, we\'92ll convert it to a NumPy array. Here\'92s the corrected function: python\uc0\u8232 
\f2\fs22 \cf4 \cb5 \strokec4 CollapseWrapCopy
\f1\fs24 \cf0 \cb1 \strokec2 \uc0\u8232 \u8232 
\f3\fs23\fsmilli11700 \cf7 \strokec7 def\cf0 \strokec2  \cf8 \strokec8 hand_to_object_finder\cf0 \strokec2 (image, query_embedding):\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls3\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     name = \cf6 \strokec6 ''\cf0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     directions = [\cf6 \strokec6 "Right"\cf0 \strokec2 , \cf6 \strokec6 "Up-Right"\cf0 \strokec2 , \cf6 \strokec6 "Up"\cf0 \strokec2 , \cf6 \strokec6 "Up-Left"\cf0 \strokec2 ,\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2                   \cf6 \strokec6 "Left"\cf0 \strokec2 , \cf6 \strokec6 "Down-Left"\cf0 \strokec2 , \cf6 \strokec6 "Down"\cf0 \strokec2 , \cf6 \strokec6 "Down-Right"\cf0 \strokec2 ]\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     
\f4\i \cf9 \strokec9 # Convert the input image to RGB
\f3\i0 \cf0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     pil_image = Image.fromarray(rgb_image)\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     
\f4\i \cf9 \strokec9 # Run Mediapipe Hands on the image
\f3\i0 \cf0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     hand_results = hands.process(rgb_image)\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     
\f4\i \cf9 \strokec9 # Run YOLO model on the image
\f3\i0 \cf0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     yolo_results = model(image)\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     
\f4\i \cf9 \strokec9 # Run depth-estimation model on the image
\f3\i0 \cf0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     depth_result = depth_estimator(pil_image)\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     depth_map = np.array(depth_result[\cf6 \strokec6 'depth'\cf0 \strokec2 ])  
\f4\i \cf9 \strokec9 # Extract the depth map (as a NumPy array)
\f3\i0 \cf0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     
\f4\i \cf9 \strokec9 # Normalize the depth map for visualization (scale to 0-255)
\f3\i0 \cf0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     normalized_depth = cv2.normalize(depth_map, \cf10 \strokec10 None\cf0 \strokec2 , \cf11 \strokec11 0\cf0 \strokec2 , \cf11 \strokec11 255\cf0 \strokec2 , cv2.NORM_MINMAX).astype(\cf6 \strokec6 'uint8'\cf0 \strokec2 )\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     depth_colored = cv2.applyColorMap(normalized_depth, cv2.COLORMAP_MAGMA)  
\f4\i \cf9 \strokec9 # Colorize for better visualization
\f3\i0 \cf0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     c = \cf11 \strokec11 0\cf0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     things = []\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     x1s, y1s, x2s, y2s = \cf11 \strokec11 0\cf0 \strokec2 , \cf11 \strokec11 0\cf0 \strokec2 , \cf11 \strokec11 0\cf0 \strokec2 , \cf11 \strokec11 0\cf0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     
\f4\i \cf9 \strokec9 # Draw YOLO detections
\f3\i0 \cf0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     \cf7 \strokec7 for\cf0 \strokec2  box \cf7 \strokec7 in\cf0 \strokec2  yolo_results[\cf11 \strokec11 0\cf0 \strokec2 ].boxes:\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         class_id = \cf12 \strokec12 int\cf0 \strokec2 (box.cls)\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         label = model.names[class_id]\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         
\f4\i \cf9 \strokec9 # Skip people count
\f3\i0 \cf0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         \cf7 \strokec7 if\cf0 \strokec2  class_id == \cf11 \strokec11 0\cf0 \strokec2 :\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2             c += \cf11 \strokec11 1\cf0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2             \cf7 \strokec7 continue\cf0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         
\f4\i \cf9 \strokec9 # Get box coordinates
\f3\i0 \cf0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         x1, y1, x2, y2 = \cf12 \strokec12 map\cf0 \strokec2 (\cf12 \strokec12 int\cf0 \strokec2 , box.xyxy[\cf11 \strokec11 0\cf0 \strokec2 ])  
\f4\i \cf9 \strokec9 # Bounding box coordinates
\f3\i0 \cf0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         \cf7 \strokec7 if\cf0 \strokec2  name == label:\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2             x1s, y1s, x2s, y2s = x1, y1, x2, y2\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         
\f4\i \cf9 \strokec9 # Draw bounding box
\f3\i0 \cf0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         cv2.rectangle(image, (x1, y1), (x2, y2), (\cf11 \strokec11 0\cf0 \strokec2 , \cf11 \strokec11 255\cf0 \strokec2 , \cf11 \strokec11 0\cf0 \strokec2 ), \cf11 \strokec11 2\cf0 \strokec2 )\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         
\f4\i \cf9 \strokec9 # Put label text
\f3\i0 \cf0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         text = \cf6 \strokec6 f"\cf13 \strokec13 \{label\}\cf6 \strokec6 "\cf0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         cv2.putText(image, text, (x1, y1 - \cf11 \strokec11 10\cf0 \strokec2 ), cv2.FONT_HERSHEY_SIMPLEX, \cf11 \strokec11 0.5\cf0 \strokec2 , (\cf11 \strokec11 0\cf0 \strokec2 , \cf11 \strokec11 255\cf0 \strokec2 , \cf11 \strokec11 0\cf0 \strokec2 ), \cf11 \strokec11 2\cf0 \strokec2 )\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         things.append(model.names[class_id])\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     
\f4\i \cf9 \strokec9 # Calculate vector for direction
\f3\i0 \cf0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     \cf7 \strokec7 if\cf0 \strokec2  things:\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         doc_embeddings = sentance_model.encode(things, convert_to_tensor=\cf10 \strokec10 True\cf0 \strokec2 )\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         cosine_scores = util.cos_sim(query_embedding, doc_embeddings)[\cf11 \strokec11 0\cf0 \strokec2 ]\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         ranked_docs = \cf12 \strokec12 sorted\cf0 \strokec2 (\cf12 \strokec12 zip\cf0 \strokec2 (cosine_scores.tolist(), things), reverse=\cf10 \strokec10 True\cf0 \strokec2 , key=\cf7 \strokec7 lambda\cf0 \strokec2  x: x[\cf11 \strokec11 0\cf0 \strokec2 ])\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         score, name = ranked_docs[\cf11 \strokec11 0\cf0 \strokec2 ]\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     object_x = (x1s + x2s) // \cf11 \strokec11 2\cf0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     object_y = (y1s + y2s) // \cf11 \strokec11 2\cf0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     
\f4\i \cf9 \strokec9 # Process hands
\f3\i0 \cf0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     \cf7 \strokec7 if\cf0 \strokec2  hand_results.multi_hand_landmarks:\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         \cf7 \strokec7 for\cf0 \strokec2  hand_landmarks \cf7 \strokec7 in\cf0 \strokec2  hand_results.multi_hand_landmarks:\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2             mp_drawing.draw_landmarks(\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2                 image,\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2                 hand_landmarks,\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2                 mp_hands.HAND_CONNECTIONS,\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2                 mp_drawing.DrawingSpec(color=(\cf11 \strokec11 0\cf0 \strokec2 , \cf11 \strokec11 255\cf0 \strokec2 , \cf11 \strokec11 0\cf0 \strokec2 ), thickness=\cf11 \strokec11 2\cf0 \strokec2 , circle_radius=\cf11 \strokec11 2\cf0 \strokec2 ),\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2                 mp_drawing.DrawingSpec(color=(\cf11 \strokec11 0\cf0 \strokec2 , \cf11 \strokec11 0\cf0 \strokec2 , \cf11 \strokec11 255\cf0 \strokec2 ), thickness=\cf11 \strokec11 2\cf0 \strokec2 , circle_radius=\cf11 \strokec11 2\cf0 \strokec2 ),\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2             )\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     \cf7 \strokec7 if\cf0 \strokec2  hand_results.multi_hand_landmarks \cf7 \strokec7 and\cf0 \strokec2  \cf12 \strokec12 len\cf0 \strokec2 (yolo_results[\cf11 \strokec11 0\cf0 \strokec2 ].boxes) - c != \cf11 \strokec11 0\cf0 \strokec2 :\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         hand_landmarks = hand_results.multi_hand_landmarks[\cf11 \strokec11 0\cf0 \strokec2 ]\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         hand_x = \cf12 \strokec12 int\cf0 \strokec2 (hand_landmarks.landmark[mp_hands.HandLandmark.WRIST].x * image.shape[\cf11 \strokec11 1\cf0 \strokec2 ])\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         hand_y = \cf12 \strokec12 int\cf0 \strokec2 (hand_landmarks.landmark[mp_hands.HandLandmark.WRIST].y * image.shape[\cf11 \strokec11 0\cf0 \strokec2 ])\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         dx = object_x - hand_x\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         dy = object_y - hand_y\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         angle_radians = math.atan2(dy, dx)\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         angle_radians = (angle_radians + math.pi) % (\cf11 \strokec11 2\cf0 \strokec2  * math.pi) - math.pi\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         angleindex = \cf12 \strokec12 round\cf0 \strokec2 ((angle_radians + math.pi) / (math.pi / \cf11 \strokec11 4\cf0 \strokec2 )) % \cf11 \strokec11 8\cf0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         dist = math.sqrt((object_x - hand_x) ** \cf11 \strokec11 2\cf0 \strokec2  + (object_y - hand_y) ** \cf11 \strokec11 2\cf0 \strokec2 )\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         obd, handd = depth_map[object_y, object_x], depth_map[hand_y, hand_x]\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         \cf7 \strokec7 if\cf0 \strokec2  \cf12 \strokec12 abs\cf0 \strokec2 (\cf12 \strokec12 int\cf0 \strokec2 (handd) - \cf12 \strokec12 int\cf0 \strokec2 (obd)) >= \cf11 \strokec11 80\cf0 \strokec2 :\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2             \cf7 \strokec7 return\cf0 \strokec2  \cf6 \strokec6 'go forward'\cf0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         \cf7 \strokec7 elif\cf0 \strokec2  (\cf12 \strokec12 abs\cf0 \strokec2 (\cf12 \strokec12 int\cf0 \strokec2 (handd) - \cf12 \strokec12 int\cf0 \strokec2 (obd)) <= \cf11 \strokec11 30\cf0 \strokec2 ) \cf7 \strokec7 and\cf0 \strokec2  dist <= \cf11 \strokec11 150\cf0 \strokec2 :\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2             \cf7 \strokec7 return\cf0 \strokec2  \cf6 \strokec6 'object within reach'\cf0 \strokec2 \
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         \cf7 \strokec7 else\cf0 \strokec2 :\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2             \cf7 \strokec7 return\cf0 \strokec2  directions[angleindex]\
\ls3\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     \cf7 \strokec7 return\cf0 \strokec2  \cf6 \strokec6 "No hand or object detected."
\f1\fs21\fsmilli10800 \cf0 \strokec2 \uc0\u8232 
\fs24 \uc0\u8232 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls3\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Also, rename the parameter i to query_embedding for clarity (since it\'92s the encoded query from SentenceTransformer).\
\pard\pardeftab720\sa319\partightenfactor0

\f0\b \cf0 1.3 Update perform_ocr_and_speak to Accept a PIL Image\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The function expects an image_path, but /process-image passes a PIL image. Let\'92s modify it: python\uc0\u8232 
\f2\fs22 \cf4 \cb5 \strokec4 CollapseWrapCopy
\f1\fs24 \cf0 \cb1 \strokec2 \uc0\u8232 \u8232 
\f3\fs23\fsmilli11700 \cf7 \strokec7 def\cf0 \strokec2  \cf8 \strokec8 perform_ocr_and_speak\cf0 \strokec2 (image, language=\cf6 \strokec6 'en'\cf0 \strokec2 ):\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     
\f4\i \cf9 \strokec9 # Convert PIL image to NumPy array
\f3\i0 \cf0 \strokec2 \
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     image_np = np.array(image)\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     
\f4\i \cf9 \strokec9 # Save temporarily to disk for EasyOCR
\f3\i0 \cf0 \strokec2 \
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     temp_path = \cf6 \strokec6 "temp_image.jpg"\cf0 \strokec2 \
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     cv2.imwrite(temp_path, cv2.cvtColor(image_np, cv2.COLOR_RGB2BGR))\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     \
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     
\f4\i \cf9 \strokec9 # Initialize the EasyOCR reader
\f3\i0 \cf0 \strokec2 \
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     reader = easyocr.Reader([language])\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     \
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     
\f4\i \cf9 \strokec9 # Perform OCR on the image
\f3\i0 \cf0 \strokec2 \
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     result = reader.readtext(temp_path)\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     \
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     
\f4\i \cf9 \strokec9 # Extract text from the result
\f3\i0 \cf0 \strokec2 \
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     extracted_text = \cf6 \strokec6 " "\cf0 \strokec2 .join([text[\cf11 \strokec11 1\cf0 \strokec2 ] \cf7 \strokec7 for\cf0 \strokec2  text \cf7 \strokec7 in\cf0 \strokec2  result])\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     \
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     
\f4\i \cf9 \strokec9 # Clean up
\f3\i0 \cf0 \strokec2 \
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     os.remove(temp_path)\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     \
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     \cf7 \strokec7 return\cf0 \strokec2  extracted_text
\f1\fs21\fsmilli10800 \uc0\u8232 
\fs24 \uc0\u8232 \
\pard\pardeftab720\sa319\partightenfactor0

\f0\b \cf0 1.4 Update analyze_image_with_gpt to Accept a PIL Image\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The function expects a NumPy array, but /process-image passes a PIL image. Let\'92s fix it: python\uc0\u8232 
\f2\fs22 \cf4 \cb5 \strokec4 CollapseWrapCopy
\f1\fs24 \cf0 \cb1 \strokec2 \uc0\u8232 \u8232 
\f3\fs23\fsmilli11700 \cf7 \strokec7 def\cf0 \strokec2  \cf8 \strokec8 analyze_image_with_gpt\cf0 \strokec2 (image, api_key):\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     client = OpenAI(api_key=api_key)\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     
\f4\i \cf9 \strokec9 # Convert PIL image to NumPy array for OpenCV
\f3\i0 \cf0 \strokec2 \
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     image_np = np.array(image)\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     image_np = cv2.cvtColor(image_np, cv2.COLOR_RGB2BGR)\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     
\f4\i \cf9 \strokec9 # Convert the image to base64
\f3\i0 \cf0 \strokec2 \
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     _, buffer = cv2.imencode(\cf6 \strokec6 '.jpg'\cf0 \strokec2 , image_np)\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     image_data = base64.b64encode(buffer).decode(\cf6 \strokec6 "utf-8"\cf0 \strokec2 )\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     prompt = (\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         \cf6 \strokec6 "Describe the main elements of the image in simple, direct language. "\cf0 \strokec2 \
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         \cf6 \strokec6 "Focus on key objects, their positions, and basic room features. Avoid detailed adjectives. "\cf0 \strokec2 \
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         \cf6 \strokec6 "Mention people if present. Keep the description very brief, suitable for about 5-7 seconds of speech. "\cf0 \strokec2 \
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         \cf6 \strokec6 "Explain this as if the user is blind or has impaired vision in adequate detail."\cf0 \strokec2 \
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     )\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     \cf7 \strokec7 try\cf0 \strokec2 :\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         response = client.chat.completions.create(\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2             model=\cf6 \strokec6 "gpt-4o"\cf0 \strokec2 ,\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2             messages=[\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2                 \{\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2                     \cf6 \strokec6 "role"\cf0 \strokec2 : \cf6 \strokec6 "user"\cf0 \strokec2 ,\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2                     \cf6 \strokec6 "content"\cf0 \strokec2 : [\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2                         \{\cf6 \strokec6 "type"\cf0 \strokec2 : \cf6 \strokec6 "text"\cf0 \strokec2 , \cf6 \strokec6 "text"\cf0 \strokec2 : prompt\},\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2                         \{\cf6 \strokec6 "type"\cf0 \strokec2 : \cf6 \strokec6 "image_url"\cf0 \strokec2 , \cf6 \strokec6 "image_url"\cf0 \strokec2 : \{\cf6 \strokec6 "url"\cf0 \strokec2 : \cf6 \strokec6 f"data:image/jpeg;base64,\cf13 \strokec13 \{image_data\}\cf6 \strokec6 "\cf0 \strokec2 \}\}\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2                     ]\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2                 \}\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2             ],\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2             max_tokens=\cf11 \strokec11 300\cf0 \strokec2 \
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         )\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         \cf7 \strokec7 return\cf0 \strokec2  response.choices[\cf11 \strokec11 0\cf0 \strokec2 ].message.content\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     \cf7 \strokec7 except\cf0 \strokec2  Exception \cf7 \strokec7 as\cf0 \strokec2  e:\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         \cf7 \strokec7 return\cf0 \strokec2  \cf6 \strokec6 f"Error: \cf13 \strokec13 \{\cf12 \strokec12 str\cf13 \strokec13 (e)\}\cf6 \strokec6 "
\f1\fs21\fsmilli10800 \cf0 \strokec2 \uc0\u8232 
\fs24 \uc0\u8232 \
\pard\pardeftab720\sa319\partightenfactor0

\f0\b \cf0 1.5 Combine Endpoints into a Single /process Endpoint\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0
\f1\b0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Our Official Plan calls for a single /process endpoint that takes both the query and image. Let\'92s replace /speech and /process-image with /process:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls6\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Remove the existing /speech and /process-image endpoints.\
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Remove the global response_toapp variable (we don\'92t need it anymore).\
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Add the new /process endpoint: python\uc0\u8232 
\f2\fs22 \cf4 \cb5 \strokec4 CollapseWrapCopy
\f1\fs24 \cf0 \cb1 \strokec2 \uc0\u8232 \u8232 
\f3\fs23\fsmilli11700 \cf7 \strokec7 from\cf0 \strokec2  fastapi \cf7 \strokec7 import\cf0 \strokec2  FastAPI, File, UploadFile, Form\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls6\ilvl1\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 from\cf0 \strokec2  pydantic \cf7 \strokec7 import\cf0 \strokec2  BaseModel\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls6\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 app = FastAPI()\
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 prompts = [\cf6 \strokec6 'Read the text'\cf0 \strokec2 , \cf6 \strokec6 'describe what I am viewing'\cf0 \strokec2 , \cf6 \strokec6 'Identify object location'\cf0 \strokec2 , \cf6 \strokec6 'Other'\cf0 \strokec2 ]\
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 doc_embeddings = sentance_model.encode(prompts, convert_to_tensor=\cf10 \strokec10 True\cf0 \strokec2 )\
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls6\ilvl1\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 @app.post(\cf6 \strokec6 "/process"\cf8 \strokec8 )\cf0 \strokec2 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls6\ilvl1\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 async\cf0 \strokec2  \cf7 \strokec7 def\cf0 \strokec2  \cf8 \strokec8 process_request\cf0 \strokec2 (query: \cf12 \strokec12 str\cf0 \strokec2  = Form(...), file: UploadFile = File(...)):\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls6\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     \cf7 \strokec7 try\cf0 \strokec2 :\
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         
\f4\i \cf9 \strokec9 # Step 1: Classify the intent using NLP
\f3\i0 \cf0 \strokec2 \
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         query_embedding = sentance_model.encode(query, convert_to_tensor=\cf10 \strokec10 True\cf0 \strokec2 )\
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         cosine_scores = util.cos_sim(query_embedding, doc_embeddings)[\cf11 \strokec11 0\cf0 \strokec2 ]\
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         ranked_docs = \cf12 \strokec12 sorted\cf0 \strokec2 (\cf12 \strokec12 zip\cf0 \strokec2 (cosine_scores.tolist(), prompts), reverse=\cf10 \strokec10 True\cf0 \strokec2 , key=\cf7 \strokec7 lambda\cf0 \strokec2  x: x[\cf11 \strokec11 0\cf0 \strokec2 ])\
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         score, intent = ranked_docs[\cf11 \strokec11 0\cf0 \strokec2 ]\
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         
\f4\i \cf9 \strokec9 # Step 2: Read and process the image
\f3\i0 \cf0 \strokec2 \
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         contents = \cf7 \strokec7 await\cf0 \strokec2  file.read()\
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         image = Image.\cf12 \strokec12 open\cf0 \strokec2 (io.BytesIO(contents)).convert(\cf6 \strokec6 "RGB"\cf0 \strokec2 )\
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         image_np = np.array(image)  
\f4\i \cf9 \strokec9 # Convert to NumPy array for OpenCV
\f3\i0 \cf0 \strokec2 \
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         
\f4\i \cf9 \strokec9 # Step 3: Route based on intent
\f3\i0 \cf0 \strokec2 \
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         \cf7 \strokec7 if\cf0 \strokec2  score <= \cf11 \strokec11 0.35\cf0 \strokec2 :\
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2             response = \cf6 \strokec6 "I'm sorry, I could not understand your request."\cf0 \strokec2 \
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         \cf7 \strokec7 elif\cf0 \strokec2  intent == prompts[\cf11 \strokec11 0\cf0 \strokec2 ]:  
\f4\i \cf9 \strokec9 # Read the text
\f3\i0 \cf0 \strokec2 \
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2             response = perform_ocr_and_speak(image)\
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         \cf7 \strokec7 elif\cf0 \strokec2  intent == prompts[\cf11 \strokec11 1\cf0 \strokec2 ]:  
\f4\i \cf9 \strokec9 # Describe what I am viewing
\f3\i0 \cf0 \strokec2 \
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2             response = analyze_image_with_gpt(image, api_key)\
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         \cf7 \strokec7 elif\cf0 \strokec2  intent == prompts[\cf11 \strokec11 2\cf0 \strokec2 ]:  
\f4\i \cf9 \strokec9 # Identify object location
\f3\i0 \cf0 \strokec2 \
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2             response = hand_to_object_finder(image_np, query_embedding)\
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         \cf7 \strokec7 else\cf0 \strokec2 :  
\f4\i \cf9 \strokec9 # Other
\f3\i0 \cf0 \strokec2 \
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2             response = \cf6 \strokec6 "I am not equipped to answer that. Please try asking a different question."\cf0 \strokec2 \
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         \cf12 \strokec12 print\cf0 \strokec2 (\cf6 \strokec6 f"Processed query: \cf13 \strokec13 \{query\}\cf6 \strokec6 , Intent: \cf13 \strokec13 \{intent\}\cf6 \strokec6 , Response: \cf13 \strokec13 \{response\}\cf6 \strokec6 "\cf0 \strokec2 )\
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         \cf7 \strokec7 return\cf0 \strokec2  JSONResponse(content=\{\cf6 \strokec6 "response"\cf0 \strokec2 : response\})\
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2     \cf7 \strokec7 except\cf0 \strokec2  Exception \cf7 \strokec7 as\cf0 \strokec2  e:\
\ls6\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2         \cf7 \strokec7 return\cf0 \strokec2  JSONResponse(content=\{\cf6 \strokec6 "error"\cf0 \strokec2 : \cf12 \strokec12 str\cf0 \strokec2 (e)\}, status_code=\cf11 \strokec11 500\cf0 \strokec2 )
\f1\fs21\fsmilli10800 \uc0\u8232 
\fs24 \uc0\u8232 \
\pard\pardeftab720\sa319\partightenfactor0

\f0\b \cf0 1.6 Test the Backend\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Set the Alias
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls7\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 In your VS Code terminal (in /Users/sammy_tourani/Desktop/Spectra/Backend Python Files/): text\uc0\u8232 
\f2\fs22 \cf4 \cb5 \strokec4 CollapseWrapCopy
\f1\fs24 \cf0 \cb1 \strokec2 \uc0\u8232 \u8232 
\f3\fs23\fsmilli11700 alias python3='/opt/homebrew/bin/python3.11'
\f1\fs21\fsmilli10800 \uc0\u8232 
\fs24 \uc0\u8232 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0
\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Run the Server
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls7\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Run: text\uc0\u8232 
\f2\fs22 \cf4 \cb5 \strokec4 CollapseWrapCopy
\f1\fs24 \cf0 \cb1 \strokec2 \uc0\u8232 \u8232 
\f3\fs23\fsmilli11700 python3 -m uvicorn main:app --reload
\f1\fs21\fsmilli10800 \uc0\u8232 
\fs24 \uc0\u8232 \
\ls7\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 You should see: text\uc0\u8232 
\f2\fs22 \cf4 \cb5 \strokec4 CollapseWrapCopy
\f1\fs24 \cf0 \cb1 \strokec2 \uc0\u8232 \u8232 
\f3\fs23\fsmilli11700 INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
\f1\fs21\fsmilli10800 \uc0\u8232 
\fs24 \uc0\u8232 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0
\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Test the /process Endpoint
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls7\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Use curl or Postman to test: text\uc0\u8232 
\f2\fs22 \cf4 \cb5 \strokec4 CollapseWrapCopy
\f1\fs24 \cf0 \cb1 \strokec2 \uc0\u8232 \u8232 
\f3\fs23\fsmilli11700 curl -X POST "http://127.0.0.1:8000/process" -F "query=describe what I am viewing" -F "file=@test.jpg"
\f1\fs21\fsmilli10800 \uc0\u8232 
\fs24 \uc0\u8232 \
\ls7\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Replace test.jpg with a real image file on your computer.\
\ls7\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Expected response: A JSON object like \{"response": "A table with a book on it."\} (actual response depends on the image and OpenAI\'92s output).\
\pard\pardeftab720\sa319\partightenfactor0

\f0\b \cf0 What to Tell Me\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Step 1 Result
\f1\b0 : If the server runs and the test works, say \'93Done\'94 and share the response you got (e.g., \'93I got \{"response": "A table with a book."\}\'94). If you get an error, paste the full terminal output.\
\ls8\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Missing Info
\f1\b0 : I don\'92t have image-to-tts.py and image-description.py. If they differ significantly from perform_ocr_and_speak and analyze_image_with_gpt, please share them so I can ensure compatibility in future steps.\
\ls8\ilvl0
\f0\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Next Step
\f1\b0 : If this works, we\'92ll move to Step 2: Implement NLP Intent Classification (though we\'92ve already done some of this in /process).\
\pard\pardeftab720\sa240\partightenfactor0
\cf0 Let\'92s get this backend running\'97make the changes to main.py, save, and test it! I\'92ll wait for your update.\
}